This part of the assignment will serve as an introduction to Linux. Make sure you go through the
steps below and submit screenshots where requested – submit the entire screenshot of a
command terminal.
Use at least a t2.small instance or Hadoop may not run properly with insufficient memory.
All Linux commands are in Berlin Sans FB. Do not type the “$” symbol. The “$” represents
the prompt “[ec2-user@ip-xxx-xx-xx-xxx ~] $ ” in your particular Linux instance.
0. Login to your Amazon EC2 Instance (NOTE: instructions on how to create a new instance
and log in to it are provided in a separate file, UsingAmazonAWS.doc)
SUBMIT: The name of the instance that you have created.
Connect to your instance through PuTTy or a Mac terminal.
On Windows, your instance would look similar to the following image. On a Mac, you would
instead get the same text in an XTerm terminal:
1. Create a text file.
Instructions for 3 different text editors are provided below. You only need to choose one
editor that you prefer. nano is a more basic text editor, and is much easier to start. vim and
emacs are more advanced and rely on keyboard shortcuts quite a bit and thus have a steeper
learning curve.
• Tip: To paste into Linux terminal you can use right-click. To copy from the Linux terminal,
you only need to highlight the text that you want to copy with your mouse. Also please
remember that Linux is case-sensitive, which means Nano and nano are not equivalent.
Nano Instructions(Option 1):
$ nano myfile.txt
Type something into the file: “This is my text file for CSC555.”
Save changes: Ctrl-o and hit Enter.
Exit: Ctrl-x
Emacs Instructions (Option 2):
You will need to install emacs.
$ sudo yum install emacs
Type “y” when asked if this is OK to install.
$ emacs myfile.txt
Type something into the file: “This is my text file for CSC555.”
Save changes: Ctrl-x, Ctrl-s
Exit: Ctrl-x Ctrl-z
Vim Instructions(Option 3):
• NOTE: When vim opens, you are in command mode. Any key you enter will be bound to a
command instead of inserted into the file. To enter insert mode press the key “i”. To save a
file or exit you will need to hit Esc to get back into command mode.
$ vim myfile.txt
Type “i” to enter insert mode
Type something into the file: “This is my text file for CSC555.”
Save changes: hit Esc to enter command mode then type “:w”
Exit: (still in command mode) type “:x”
Confirm your file has been saved by listing the files in the working directory.
$ ls
You should see your file.
Display the contents of the file on the screen.
$ cat myfile.txt
Your file contents should be printed to the terminal.
• Tip: Linux will fill in partially typed commands if you hit Tab.
$cat myfi
Hit Tab and “myfi” should be completed to “myfile.txt”. If there are multiple completion
options, hit Tab twice and a list of all possible completions will be printed. This also
applies to commands themselves, i.e. you can type in ca and see all possible commands
that begin with ca.
2. Copy your file.
Make a copy.
$ cp myfile.txt mycopy.txt
Confirm this file has been created by listing the files in the working directory.
Edit this file so it contains different text than the original file using the text editor instructions,
and confirm your changes by displaying the contents of the file on the screen.
SUBMIT: Take a screen shot of the contents of your copied file displayed on the terminal
screen.
3. Delete a file
Make a copy to delete.
$ cp myfile.txt filetodelete.txt
$ ls
Remove the file.
$ rm filetodelete.txt
$ ls
4. Create a directory to put your files.
Make a directory.
$mkdir CSC555
Change the current directory to your new directory.
$cd CSC555
Print your current working directory
$pwd
5. Move your files to your new directory.
Return to your home directory.
$cd
OR
$cd ..
OR
$ cd /home/ec2-user/
• NOTE: cd will always take you to your home directory. cd .. will move you up one
directory level (to the parent). Your home directory is “/home/[user name]”, /home/ec2-user
in our case
Move your files to your new directory.
$ mv myfile.txt CSC555/
$ mv mycopy.txt CSC555/
Change the current directory to CSC555 and list the files in this directory.
SUBMIT: Take a screen shot of the files listed in the CSC555 directory.
6. Zip and Unzip your files.
Zip the files.
$ zip myzipfile mycopy.txt myfile.txt
OR
$ zip myzipfile *
• NOTE: * is the wildcard symbol that matches everything in current directory. If there
should be any additional files in the current directory, they will also be placed into the zip
archive. Wildcard can also be used to match files selectively. For example zip myzipfile
my* will zip-up all files beginning with “my” in the current directory.
Move your zip file to your home directory.
$ mv myzipfile.zip /home/ec2-user/
Return to your home directory.
Extract the files.
$ unzip myzipfile.zip
SUBMIT: Take a screen shot of the screen after this command.
7. Remove your CSC555 directory.
• Warning: Executing “rm -rf” has the potential to delete ALL files in a given directory,
including sub-directories (“r” stands for recursive). You should use this command very
carefully.
Delete your CSC555 directory.
$ rm -rf CSC555/
8. Download a file from the web.
Download the script for Monty Python and the Holy Grail.
$ wget http://www.textfiles.com/media/SCRIPTS/grail
The file should be saved as “grail” by default.
9. ls formats
List all contents of the current directory in long list format.
• Note: the option following “ls” is the character “l”; not “one”.
$ ls -l
The 1st column gives information regarding file permissions (which we will discuss in more
detail later). For now, note that the first character of the 10 total will be “-“ for normal files
and “d” for directories. The 2nd Column is the number of links to the file. The 3rd and 4th
columns are the owner and the group of the file. The 5th column displays the size of the file in
bytes. The 6th column is the date and time the file was last modified. The 7th column is the file
or directory name.
List all contents of the current directory in long list and human readable formats. “-h” will put
large files in more readable units than bytes.
$ ls -lh
SUBMIT: The size of the grail file.
10. More on viewing files.
If you issue “cat grail”, the contents of grail will be printed. However, this file is too large to
fit on the screen.
Show the grail file one page at a time.
$ more grail
Hit the spacebar to go to the next page. Type “b” to go page up, hit “space” key to go page
down. Type “q” to quit.
OR
$ less grail
Less has more options than more (“less is more and more is less”). You can now use the
keyboard Arrows and Page Up/Down to scroll. You can type “h” for help, which will display
additional options.
View the line numbers in the grail file. The cat command has the -n option, which prints line
numbers, but you may also want to use more to view the file one page at a time. A solution is
to pipe the output from cat to more. A pipe redirects the output from one program to another
program for further processing, and it is represented with “|”.
$ cat -n grail | more
Redirect the standard output (stdout) of a command.
$ cat myfile.txt > redirect1.txt
$ ls -lh > redirect2.txt
Append the stdout to a file.
$ cat mycopy.txt >> myfile.txt
mycopy.txt will be appended to myfile.txt.
• Note: “cat mycopy.txt > myfile.txt” will overwrite myfile.txt with the contents output by
“cat mycopy.txt”. Thus using >> is crucial if you want to preserve the existing file contents.
11. Change access permissions to objects with the change mode command.
The following represent roles:
u – user, g – group, o – others, a - all
The following represent permissions:
r – read, w – write, x – execute
Remove the read permission for your user on a file.
$ chmod u-r myfile.txt
Try to read this file. You should receive a “permission denied” message because you are the
user who owns the file.
SUBMIT: The screenshot of the permission denied error
Give your user read permission on a file. Use the same file you removed the read permission
from.
$ chmod u+r myfile.txt
You should now be able to read this file again.
12. Python examples
Install Python if it is not available on your machine.
$ sudo yum install python
Create a Python file. These instructions will use Emacs as a text editor, but you can still chose
the text editor you want.
$ emacs lucky.py
(Write a simple Python program)
print "*"*25
print "My Lucky Numbers".rjust(20)
print "*"*25
for i in range(10):
lucky_nbr = (i + 1)*2
print "My lucky number is %s!" % lucky_nbr
Run your Python program.
$ python lucky.py
Redirect your output to a file
$ python lucky.py > lucky.txt
Pipe the stdout from lucky.py to another Python program that will replace “is” with “was”.
$ emacs was.py
import sys
for line in sys.stdin:
print line.replace("is", "was")
$ python lucky.py | python was.py
Write python code to read a text file (you can use myfile.txt) and output a word count total for
each word with the number of times that word occurs in the entire file. That is, if the file has the
word “Hadoop” occurs in the file 5 times, your code should print “Hadoop 5”. It should output
the count of all words occurring in a file.
SUBMIT: The screen output from running your python code and a copy of your python code.
Homework submissions without code will receive no credit.
